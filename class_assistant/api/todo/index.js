// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

const {
    TeamsFx,
    getTediousConnectionConfig,
} = require("@microsoft/teamsfx");
const { Connection, Request } = require('tedious');

/**
 * This function handles requests sent from teamsfx client SDK.
 * The HTTP request should contain an SSO token in the header and any content in the body.
 * The SSO token should be queried from Teams client by teamsfx client SDK.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx Server SDK with the configuration and calls these APIs:
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - getMicrosoftGraphClientWithUserIdentity() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxConfig} config - The teamsfx configuration generated by teamsfx binding.
 */
module.exports = async function (context, req, config) {
    let connection;
    try {
        const method = req.method.toLowerCase();
        const accessToken = config.AccessToken;
        const teamsfx = new TeamsFx().setSsoToken(accessToken);
        // Get the user info from access token
        const currentUser = await teamsfx.getUserInfo();
        const objectId = currentUser.objectId;
        var query;

        switch (method) {
            case "get":
                switch(req.query.flag){
                    case "check": //获取某个签到的签到人员列表
                        query=`select * from dbo.[${req.query.tname}]`;
                        break;
                    case "checkhomework": //查看某一次作业的交作业情况
                        query=`select * from dbo.[${req.query.tname}]`;
                        break;
                    case "announcement": //获取公告列表
                        query = `select * from announcement`;
                        break;
                    case "homework": //获取作业列表
                        query='select * from homework'
                        break;
                    case "material": //获取资料列表
                        query=`select * from dbo.material`;
                        break;
                    case "getfromazure": //获取存储账户上的文件
                        const { BlobServiceClient } = require("@azure/storage-blob");
                        const AZURE_STORAGE_CONNECTION_STRING='DefaultEndpointsProtocol=https;AccountName=todolist99bbc6api;AccountKey=+7BcGLdoBAHfbUtYhkKEp947hx/IJNHywt6jz7NUUdkhM8ktllybSULCNXdT0jgg0EnCTrDEXpbJ+ASt5GRX7A==;EndpointSuffix=core.windows.net'
                        const storageAccountConnectionString = AZURE_STORAGE_CONNECTION_STRING;
                        //const blobServiceClient = BlobServiceClient.fromConnectionString(storageAccountConnectionString);
                        const sasurl='https://todolist99bbc6api.blob.core.windows.net/?sv=2020-08-04&ss=bfqt&srt=sco&sp=rwdlacupitfx&se=2032-05-18T19:51:46Z&st=2022-05-18T11:51:46Z&spr=https&sig=X6ORB96vxu3P%2Fq8h%2FCEVzSX%2BsQzF8zeGngLo7XXwYgw%3D'
                        const blobServiceClient = new BlobServiceClient(sasurl);
                        
                        const containerName = 'photos';
                        const containerClient = blobServiceClient.getContainerClient(containerName);
                        var re = []
                        let iter = containerClient.listBlobsFlat();
                        let blobItem = await iter.next();
                        while (!blobItem.done) {
                            var res = {
                                name:blobItem.value.name,
                                createdon:blobItem.value.properties.createdOn,
                                size:blobItem.value.properties.contentLength,
                            }
                            re.push(res);
                            blobItem = await iter.next();
                        }
                        return {
                            status: 200,
                            body: re
                        }
                        break;
                    case "signinlist": //获取签到列表
                        query = `select id, description, isCompleted, objectId from dbo.signin where channelOrChatId = '${req.query.channelOrChatId}'`;
                        break;
                }
                break;
            case "put":
                break;
            case "post":
                if(req.body.flag==0){   //学生签到
                    query=`insert into [${req.body.tname}] (username) values (N'${req.body.username}')`;
                    break;
                }
                else if(req.body.flag==1){    //创建签到表
                    query = `insert into dbo.signin (description, objectId, isCompleted, channelOrChatId) values (N'${req.body.description}','${objectId}',${req.body.isCompleted ? 1 : 0},'${req.body.channelOrChatId}')
                    CREATE TABLE [dbo].[${req.body.description}](username VARCHAR(50) NOT NULL,PRIMARY KEY (username))`;
                    break;
                }
                else if(req.body.flag==2){  //创建作业表
                    query = `insert into dbo.homework (title,description) values (N'${req.body.title}',N'${req.body.text}')
                    CREATE TABLE [dbo].[${req.body.title}](id INT IDENTITY ,username VARCHAR(50) NOT NULL PRIMARY KEY, text VARCHAR(5000) NOT NULL)`;
                    break;
                }
                else if(req.body.flag==3){   //学生交作业
                    query=`insert into [${req.body.tname}] (username,text) values (N'${req.body.username}',N'${req.body.text}')`;
                    break;
                }
                else if(req.body.flag==4){   //添加公告
                    query=`insert into dbo.announcement(title,text) values(N'${req.body.title}',N'${req.body.text}')`;
                    break;
                }
                else if(req.body.flag==5){  //上传文件到数据库
                    query=`insert into dbo.material(name,files) values(N'${req.body.name}',CAST('${req.body.file}' AS VARBINARY(max)))`;
                    break;
                }

            case "delete":
                if(req.body.flag==2){   //删除作业
                    query = "delete from dbo.homework where " + (req.body ? `title = N'${req.body.tname}' drop table [${req.body.tname}]` : `objectId = '${objectId}' drop table [${req.body.tname}]`);
                    break;
                }
                else if(req.body.flag==1){  //删除公告
                    query = `delete from dbo.announcement where title = N'${req.body.title}'`;
                    break;
                }
                else if(req.body.flag==3){  //删除公告
                    query = `delete from dbo.material where name = N'${req.body.name}'`;
                    break;
                }
                else{  //删除签到
                    query = "delete from dbo.signin where " + (req.body ? `id = ${req.body.id} drop table [${req.body.tname}]` : `objectId = '${objectId}' drop table [${req.body.tname}]`);
                    break;
                }
                
        }
        connection = await getSQLConnection(teamsfx);
        // Execute SQL through TeamsFx server SDK generated connection and return result
        const result = await execQuery(query, connection);
        return {
            status: 200,
            body: result
        }
    }
    catch (err) {
        return {
            status: 500,
            body: {
                error: err.message
            }
        }
    }
    finally {
        if (connection) {
            connection.close();
        }
    }
}

async function getSQLConnection(teamsfx) {
    
    const config = await getTediousConnectionConfig(teamsfx);
    const connection = new Connection(config);
    return new Promise((resolve, reject) => {
        connection.on('connect', err => {
            if (err) {
                reject(err);
            }
            resolve(connection);
        })
        connection.on('debug', function (err) {
            console.log('debug:', err);
        });
    })
}

async function execQuery(query, connection) {
    return new Promise((resolve, reject) => {
        const res = [];
        const request = new Request(query, (err) => {
            if (err) {
                reject(err);
            }
        });

        request.on('row', columns => {   //读数据
            const row = {};
            columns.forEach(column => {
                row[column.metadata.colName] = column.value;
            });
            res.push(row)
        });

        request.on('requestCompleted', () => {  //resolve返回
            resolve(res)
        });

        request.on("error", err => {    //reject
            reject(err);
        });

        connection.execSql(request);
    }
    )
}
